#!/usr/bin/python3

import argparse
import contextlib
import copy
import json
import logging
import os
import os.path
import sys
import yaml


_CLUSTER_YAML = 'manifests/cluster-config.yaml'
_MASTER_YAML = 'openshift/99_openshift-cluster-api_master-machines-0.yaml'
_WORKER_YAML = 'openshift/99_openshift-cluster-api_worker-machineset-0.yaml'
_OVERCOMMIT_CPU = 1.5
_OVERCOMMIT_MEM = 1.5


def adjust_overcommit(host_conf):
     return {
        "host" : {
            "vcpu": int(host_conf["host"]["vcpu"] * _OVERCOMMIT_CPU),
            "mem": int(host_conf["host"]["mem"] * _OVERCOMMIT_MEM),
        }
    }


def get_host_config():
    with open('/proc/meminfo', 'rt') as meminfo:
        for line in meminfo:
            if line.startswith('MemTotal'):
                name, amount, _ = line.split()
                host_mem = int(amount) // 1024
                break
    host_cpu = 0
    with open('/proc/cpuinfo', 'rt') as cpuinfo:
        for line in cpuinfo:
            if line.startswith('processor'):
                host_cpu += 1
    return {
        "host" : {
            "vcpu": host_cpu,
            "mem": host_mem,
        }
    }


class YAMLStore:
    def __init__(self, basedir):
        self._basedir = basedir

    def cluster_replicas(self):
        with open(self._path(_CLUSTER_YAML), 'rt') as cconf:
            tree  = yaml.safe_load(cconf)
            subtree = yaml.safe_load(tree["data"]["install-config"])
            return {
                "master": int(subtree["controlPlane"]["replicas"]),
                "worker": int(subtree["compute"][0]["replicas"]),
            }

    # this MUST return ref to internal data - no copies!
    def load_specs(self):
        return (
            self._load_config_file(self._path(_MASTER_YAML)),
            self._load_config_file(self._path(_WORKER_YAML)),
        )

    def save_specs(self, master, worker, backup=True):
        self._save_config_file(self._path(_MASTER_YAML), master, backup)
        self._save_config_file(self._path(_WORKER_YAML), worker, backup)

    # XXX helpers

    def _path(self, path):
        return os.path.join(self._basedir, path)

    def _load_config_file(self, path):
        with open(path, 'rt') as src:
            return yaml.safe_load(src)

    def _save_config_file(self, path, tree, backup=True):
        if backup:
            os.rename(path, path + '.orig')  # TODO: more than once?
        with open(path, 'wt') as dst:
            yaml.safe_dump(tree, dst)


class Cluster:
    def __init__(self, basedir, host_conf):
        self._yamls = YAMLStore(basedir)
        self._host_conf = host_conf
        self._replica_info = self._yamls.cluster_replicas()
        self._master_tree = None
        self._worker_tree = None
        self._master_tree, self._worker_tree = self._yamls.load_specs()
        self._baseline = self._get_baseline()

    @property
    def total_nodes(self):
        return (
            self._replica_info["master"] +
            self._replica_info["worker"]
        )

    def resources_used_by_conf(self, conf):
        return {
            "usage": {
                "vcpu": (
                    conf["master"]["vcpu"] * self._replica_info["master"] +
                    conf["worker"]["vcpu"] * self._replica_info["worker"]
                ),
                "mem": (
                    conf["master"]["mem"] * self._replica_info["master"] +
                    conf["worker"]["mem"] * self._replica_info["worker"]
                ),
            }
        }

    def resources_free_on_host(self, used=None):
        if used is None:
            used = self.resources_used_by_conf(self._baseline)
        return {
            "free": {
                "vcpu": max(self._host_conf["host"]["vcpu"] - used["usage"]["vcpu"], 0),
                "mem": max(self._host_conf["host"]["mem"] - used["usage"]["mem"], 0),
            }
        }

    def host_config(self):
        return copy.deepcopy(self._host_conf)

    def replica_info(self):
        return copy.deepcopy(self._replica_info)

    def baseline(self):
        return copy.deepcopy(self._baseline)

    @contextlib.contextmanager
    def specs(self):
        master, worker = self._get_specs()
        try:
            # MUST yield internal refs - not copies!
            yield master, worker
        finally:
            self._yamls.save_specs(self._master_tree, self._worker_tree)

    # helpers

    # this MUST return ref to internal data - no copies!
    def _get_specs(self):
        # TODO: keep original specs?
        return (
            self._master_tree['spec']['providerSpec']['value'],
            self._worker_tree['spec']['template']['spec']['providerSpec']['value']
        )

    def _get_baseline(self):
        master_spec, worker_spec = self._get_specs()
        return {
            "master": {
                "vcpu": int(master_spec["domainVcpu"]),
                "mem": int(master_spec["domainMemory"]),
            },
            "worker": {
                "vcpu": int(worker_spec["domainVcpu"]),
                "mem": int(worker_spec["domainMemory"]),
            }
        }
  

def _calc_res_increase(ocp, res, what, block):
    free_res = res["free"][what]
    block *= ocp.total_nodes
    unusable = free_res % block
    usable = free_res - unusable
    return usable, block


def _increase_resources_for(ocp, conf, res, what="", block=0):
    if res["free"][what] <= 0:
        return
    usable, block = _calc_res_increase(ocp, res, what, block)
    while usable > 0:
        conf["master"][what] += block
        conf["worker"][what] += block
        usable -= block


def make_conf(ocp):
    conf = ocp.baseline()
    res = ocp.resources_free_on_host()
    _increase_resources_for(ocp, conf, res, what="mem", block=1024)
    _increase_resources_for(ocp, conf, res, what="vcpu", block=2)
    return conf


def _parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--dir", help="cluster base directory",
                        default=".")
    parser.add_argument("-v", "--verbose", help="increase output verbosity",
                        default=False, action="store_true")
    parser.add_argument("-D", "--dryrun", help="only show changes, don't do them",
                        default=False, action="store_true")
    parser.add_argument("-C", "--confonly", help="only compute the config",
                        default=False, action="store_true")
    parser.add_argument("-c", "--conf", help="VM config to use", default="")
    return parser.parse_args()


def _tune(args):
    host_conf = get_host_config()
    if args.verbose:
        logging.info("host resources, native        : %s", host_conf)
    host_conf = adjust_overcommit(host_conf)
    if args.verbose:
        logging.info("host resources, overcommitted : %s", host_conf)

    ocp = Cluster(args.dir, host_conf)

    if args.verbose:
        logging.info("host resources, free          : %s",
                     ocp.resources_free_on_host())
        logging.info("cluster resources, baseline   : %s", ocp.baseline())

    if not args.conf:
        conf = make_conf(ocp)
    else:
        conf = json.loads(args.conf)
    if args.verbose:
        logging.info("cluster resources, configured : %s", conf)

    if not args.confonly:
        return

    with ocp.specs() as (master, worker):
        master['domainVcpu'] = conf["master"]["vcpu"]
        master['domainMemory'] = conf["master"]["mem"]
        worker['domainVcpu'] = conf["worker"]["vcpu"]
        worker['domainMemory'] = conf["worker"]["mem"]


if __name__ == "__main__":
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)
    _tune(_parse_options())
