#!/usr/bin/python3

import argparse
import contextlib
import json
import os
import sys
import yaml


_CLUSTER_YAML = 'manifests/cluster-config.yaml'
_MASTER_YAML = 'openshift/99_openshift-cluster-api_master-machines-0.yaml'
_WORKER_YAML = 'openshift/99_openshift-cluster-api_worker-machineset-0.yaml'
_OVERCOMMIT_CPU = 1.5
_OVERCOMMIT_MEM = 1.5


def get_host_config():
    with open('/proc/meminfo', 'rt') as meminfo:
        for line in meminfo:
            if line.startswith('MemTotal'):
                name, amount, _ = line.split()
                host_mem = int(amount) // 1024
                break
    host_cpu = 0
    with open('/proc/cpuinfo', 'rt') as cpuinfo:
        for line in cpuinfo:
            if line.startswith('processor'):
                host_cpu += 1
    return {
        "host" : {
            "vcpu": host_cpu,
            "mem": host_mem,
        }
    }


def adjust_overcommit(host_conf):
     return {
        "host" : {
            "vcpu": int(host_conf["host"]["vcpu"] * _OVERCOMMIT_CPU),
            "mem": int(host_conf["host"]["mem"] * _OVERCOMMIT_MEM),
        }
    }
   


def update_libvirtproviderspec(spec, conf, what):
    sys.stderr.write('%s vcpus (count) %d -> %d\n' % (what, spec['domainVcpu'], conf[what]["vcpu"]))
    spec['domainVcpu'] = conf[what]["vcpu"]
    sys.stderr.write('%s memory (megs) %d -> %d\n' % (what, spec['domainMemory'], conf[what]["mem"]))
    spec['domainMemory'] = conf[what]["mem"]


@contextlib.contextmanager
def update_conf(yaml_path, args):
    with open(yaml_path, 'rt') as yaml_r:
        tree = yaml.safe_load(yaml_r)

    yield tree

    if args.dryrun:
        return
    os.rename(yaml_path, yaml_path + '.orig')
    with open(yaml_path, 'wt') as yaml_w:
        master = yaml.safe_dump(tree, yaml_w)


def process(conf, args):
    with update_conf(_MASTER_YAML, args) as master:
        update_libvirtproviderspec(master['spec']['providerSpec']['value'], conf, "master")
    with update_conf(_WORKER_YAML, args) as worker:
        update_libvirtproviderspec(worker['spec']['template']['spec']['providerSpec']['value'], conf, "worker")


def get_cluster_replicas():
    with open(_CLUSTER_YAML, 'rt') as cconf:
        tree  = yaml.safe_load(cconf)
        subtree = yaml.safe_load(tree["data"]["install-config"])
        return {
            "master": int(subtree["controlPlane"]["replicas"]),
            "worker": int(subtree["compute"][0]["replicas"]),
        }


def total_nodes(replica_info):
    return (replica_info["master"] + replica_info["worker"])


def get_baseline():
    with open(_MASTER_YAML, 'rt') as master:
        master_tree = yaml.safe_load(master)
        master_spec = master_tree['spec']['providerSpec']['value']
    with open(_WORKER_YAML, 'rt') as worker:
        worker_tree = yaml.safe_load(worker)
        worker_spec = worker_tree['spec']['template']['spec']['providerSpec']['value']
    return {
        "master": {
            "vcpu": int(master_spec["domainVcpu"]),
            "mem": int(master_spec["domainMemory"]),
        },
        "worker": {
            "vcpu": int(worker_spec["domainVcpu"]),
            "mem": int(worker_spec["domainMemory"]),
        }
    }


def calc_usage(conf, replica_info):
    return {
        "usage": {
            "vcpu": (
                conf["master"]["vcpu"] * replica_info["master"] +
                conf["worker"]["vcpu"] * replica_info["worker"]
            ),
            "mem": (
                conf["master"]["mem"] * replica_info["master"] +
                conf["worker"]["mem"] * replica_info["worker"]
            ),
        }
    }


def free_resources(host_conf, used):
    return {
        "free": {
            "vcpu": max(host_conf["host"]["vcpu"] - used["usage"]["vcpu"], 0),
            "mem": max(host_conf["host"]["mem"] - used["usage"]["mem"], 0),
        }
    }


def _calc_res_increase(res, what, block, replica_info):
    free_res = res["free"][what]
    block *= total_nodes(replica_info)
    unusable = free_res % block
    usable = free_res - unusable
    return usable, block


def _increase_resources_for(conf, res, replica_info, what="", block=0):
    if res["free"][what] <= 0:
        return
    usable, block = _calc_res_increase(res, what, block, replica_info)
    while usable > 0:
        conf["master"][what] += block
        conf["worker"][what] += block
        usable -= block


def make_conf(host_conf):
    baseline = get_baseline()
    conf = {k:v for k, v in baseline.items()}
    replica_info = get_cluster_replicas()
    res = free_resources(host_conf, calc_usage(baseline, replica_info))
    _increase_resources_for(conf, res, replica_info, what="mem", block=1024)
    _increase_resources_for(conf, res, replica_info, what="vcpu", block=2)
    return conf


def _parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", help="increase output verbosity",
                        default=False, action="store_true")
    parser.add_argument("-D", "--dryrun", help="only show changes, don't do them",
                        default=False, action="store_true")
    parser.add_argument("-C", "--confonly", help="only compute the config",
                        default=False, action="store_true")
    parser.add_argument("-c", "--conf", help="VM config to use", default="")
    return parse.parse_args()


def _main(args):
    if not args.conf:
        host_conf = get_host_config()
        if args.verbose:
            print("host resources, native        : %s" % host_conf)
        host_conf = adjust_overcommit(host_conf)
        if args.verbose:
            print("host resources, overcommitted : %s" % host_conf)
        conf = make_conf(host_conf)
    else:
        conf = args.conf
    if args.verbose:
        print("cluster resources, configured : %s" % conf)

    if not args.confonly:
        return

    process(conf, args)


if __name__ == "__main__":
    _main(_parse_options())
